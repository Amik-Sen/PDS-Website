# -*- coding: utf-8 -*-
"""demo_file.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DFHIXto7yqZ9FqgG78KqgVangBicWw9A
"""

import numpy as np

# Parameter declaration
nw = 4                                                     # Number of warehouses only nodes
nd = 8                                                     # Number of Distributor only nodes
nf = 16                                                    # Number of Fair price shops
nt = 12                                                    # Number of warehouse and distributor combined togetether
dCW = (500-200)*np.random.rand(nw,1)+200                            # Distance matrix between Central warehouse to state warehouses 
dWW = (500-200)*np.random.rand(nw,nw)+200                           # Distance matrix between state warehouses
dWD = (300-100)*np.random.rand(nw,nd)+100                           # Distance matrix between state warehouses and distributors
dWF = (700-200)*np.random.rand(nw,nf)+200                           # Distance matrix between state warehouses and fair price shops
dTF = (300-50)*np.random.rand(nt,nf)+50                             # Distance matrix between state warehouses and ditributors to fairprice shops
dDF = (200-50)*np.random.rand(nd,nf)+50                             # Distance matrix between distributors and fair price shops
TCF = 20                                                   # Transportation cost per unit weight per km using freight mode
TCT = 10                                                   # Transportation cost per unit weight per km using trucks
ICW = 25                                                   # Inventory holding cost per unit weight of product at state warehouses
ICD = 15                                                   # Inventory holding cost per unit weight of product at distributors
ICF = 5                                                    # Inventory holding cost per unit weight of product at fair price shops
CW = (30-10)*np.random.rand(nw,1)+10                                # Capacity of state warehouses
CD = (10-5)*np.random.rand(nd,1)+5                                  # Capacity of distributors
CT = (30-10)*np.random.rand(nt,1)+10                                # Combined capacity of state warehouses and distributors
Tag_W = np.zeros((nw,1))                                        # Identification boolean tag to determine if a node is warehouse or not
Tag_D = np.ones((nd,1))                                         # Identification boolean tag to determine if a node is distributor or not
T = [1]
Tag_T = np.concatenate((Tag_W,Tag_D))                                 # Combined boolean tag for warehouses and distributor
CF = 5*np.random.rand(nf,1)                                         # Capacity of fair price shops
IW_0 = np.zeros((nw,1))                                         # Initial inventory of state warehouses
ID_0 = np.zeros((nd,1))                                         # Initial inventory of distributors
IF_0 = np.zeros((nf,1))                                         # Initial inventory of fair price shops
IT_0 = np.zeros((nt,1))                                         # Initial inventory of state warehouses and distributors
Df = (5-1)*np.random.rand(nf,1) + 1                                 # Demand of fair price shops
trans_cost = 0
inv_cost = 0
total_cost = 0

# Optimization Variable Declaration
WCW = np.zeros((nw,1))
WTF = np.zeros((nt,nf))                                        # Matrix of Weight of product transported between state warehouses or distributor to fair price shops 
WWF = np.zeros((nw,nf))                                        # Matrix of Weight of product transported between state warehouses to fair price shops
WWD = np.zeros((nw,nd))                                        # Matrix of Weight of product transported between state warehouses to distributors
WDF = np.zeros((nd,nf))                                         # Matrix of Weight of product transported between state distributors to fair price shops
WCW = np.zeros((nw,1))                                          # Matrix of Weight of product transported between central to state warehouses
IW = np.zeros((nw,1))
ID = np.zeros((nd,1))
IT = np.zeros((nt,1))
IF = np.zeros((nf,1))

# Heuristics implementation 
for i in range(0,nf):
  minimum_tf = min(dTF[:,i])
  num_rows, num_cols = dTF.shape
  y_tf = i
  for j in range(0,num_rows):
    if dTF[j][i]==minimum_tf:
      x_tf = j
  while CT[x_tf]<Df[i]:
    dTF[x_tf,:] = 10000;
    minimum_tf = min(dTF[:,i])
    for j in range(0,num_rows):
      if dTF[j][i]==minimum_tf:
        x_tf = j
  x_df = x_tf - nw
  if Tag_T[x_tf]==0:
    CT[x_tf] = CT[x_tf] - Df[i]
    WTF[x_tf][i] = Df[i]
    CW[x_tf] = CW[x_tf] - Df[i];
    WWF[x_tf][i] = Df[i];
    WCW[x_tf] = WCW[x_tf] + Df[i];
    IF[i] = (IF[i]+Df[i])/2;
    trans_cost = trans_cost + Df[i]*dTF[x_tf][i]*TCT;
  else:
    minimum_wd = min(dWD[:,x_df])
    num_rows, num_cols = dWD.shape
    y_wd = x_df
    for j in range(0,num_rows):
      if dWD[j][x_df]==minimum_wd:
        x_wd = j    
    while CD[x_wd]< Df[i]:
      dWD[x_wd,:] = 10000
      minimum_wd = min(dWD[:,x_df])
      num_rows, num_cols = dWD.shape
      y_wd = x_df
      for j in range(0,num_rows):
        if dWD[j][x_df]==minimum_wd:
          x_wd = j
    minimum_wf = min(dWF[:,i])
    num_rows, num_cols = dWF.shape
    y_wf = i
    for j in range(0,num_rows):
      if dWF[j][i]==minimum_wf:
        x_wf = j
    while CW[x_wf] < Df[i]:
      dWF[x_wf,:] = 10000
      minimum_wf = min(dWF[:,i])
      for j in range(0,num_rows):
        if dWF[j][i]==minimum_wf:
          x_wf = j
    if (TCT*minimum_wf) > (TCT*minimum_tf + TCT*minimum_wd):
      CT[x_tf] = CT[x_tf] - Df[i]
      WTF[x_tf][i] = Df[i]
      CD[x_df] = CD[x_df] - Df[i]
      WDF[x_df][i] = Df[i]
      WWD[x_wf][x_df]=Df[i]
      IF[i] = (IF[i]+Df[i])/2
      trans_cost = trans_cost + (Df[i]*dTF[x_tf][i]*TCT)
    else:
      CT[x_wf] = CT[x_wf] - Df[i]
      WTF[x_wf][i] = WTF[x_wf][i] + Df[i]
      CW[x_wf] = CW[x_wf] - Df[i]
      WWF[x_wf,i] = WWF[x_wf][i] + Df[i]
      WCW[x_wf] = WCW[x_wf] + Df[i]
      IF[i] = (IF[i]+Df[i])/2
      trans_cost = trans_cost + (Df[i]*dTF[x_tf][i]*TCT)

trans_cost = trans_cost + TCF*(np.matmul(dCW.T,WCW))
inv_cost = ICF*(np.matmul(np.ones((1,nf)),IF))+ ICW*(np.matmul(np.ones((1,nt)),CT))
total_cost = inv_cost + trans_cost

trans_cost

total_cost

inv_cost

